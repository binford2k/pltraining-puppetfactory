#! /usr/bin/env ruby

require 'rubygems'
require 'doppelganger'

def usage()
  puts "This is a simple non-root service management simulation."
  puts "The following actions are available:"
  puts
  puts "  * pl-service list"
  puts "  * pl-service <service> start|stop"
  puts "  * pl-service <service> enable|disable"
  puts
  exit 1
end

case ARGV.size
when 2
  name, action = ARGV
else
  action = ARGV[0]
end

services = Doppelganger.new('services')
case action
when 'list'
  services.list

when 'start'
  usage() unless defined?(name)

  service = services.retrieve(name) || {}
  service[:ensure] = :running
  services.insert(name, service)
  services.save

when 'stop'
  usage() unless defined?(name)

  service = services.retrieve(name) || {}
  service[:ensure] = :stopped
  services.insert(name, service)
  services.save

when 'enable'
  usage() unless defined?(name)

  service = services.retrieve(name) || {}
  service[:enabled] = true
  services.insert(name, service)
  services.save

when 'disable'
  usage() unless defined?(name)

  service = services.retrieve(name) || {}
  service[:enabled] = false
  services.insert(name, service)
  services.save

else
  usage()
end
